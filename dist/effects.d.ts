import { Effect } from "./index";
export declare function none<Action>(): Effect<Action>;
export declare function delay<Action>(action: Action, delay: number): Effect<Action>;
export declare function action<Action>(action: Action): Effect<Action>;
export declare function fromPromise<Action, Value = unknown, Err = Error>(promise: () => Promise<Value>, ofSuccess: (value: Value) => Action, ofError: (error: Err) => Action): Effect<Action>;
export declare function dispatchFromPromise<Action, Err = Error>(promise: () => Promise<Action>, ofError: (error: Err) => Action): Effect<Action>;
export declare function attemptPromise<Action, Value = unknown, Err = Error>(promise: () => Promise<Value>, ofError: (error: Err) => Action): Effect<Action>;
export declare function dispatchFromFunction<Action, Err = Error>(f: () => Action, ofError: (error: Err) => Action): Effect<Action>;
export declare function fromFunction<Action, Value = unknown, Err = Error>(f: () => Value, ofSuccess: (value: Value) => Action, ofError: (error: Err) => Action): Effect<Action>;
export declare function attemptFunction<Action, Value = unknown, Err = Error>(f: () => Value, ofError: (error: Err) => Action): Effect<Action>;
export declare function fromIterator<Action>(iterator: Iterable<Action>): Effect<Action>;
export declare function combine<Action>(...effects: Effect<Action>[]): Effect<Action>;
